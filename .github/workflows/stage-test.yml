name: Test application

on:
  workflow_call:
    inputs:
      ENABLE_QUALITY_GATE:
        description: Whether or not to enable quality gate
        type: boolean
        required: false
        default: false

# Environment vars common to all jobs
env:
  CI: true
  NODE_ENV: test
  NODE_AUTH_TOKEN: ${{ secrets.NPM_PACKAGE_READ_TOKEN }}
  LOG_PATH: ./logs
  JWT_SHARED_KEY_EXT: ${{ secrets.JWT_SHARED_KEY_EXT }}
  PORT: 8000
  PUBLISHED_PORT: 8000
  PORT2: 8100
  DISABLE_STDOUT: true
  DB_MASTER_URL: mongodb://localhost:27017
  DB_MASTER_DBNAME: docAutoTest
  DB_MASTER_POOLSIZE: 5
  REDIS_HOST: localhost
  REDIS_PREFIX: docAutoTest
  ENABLE_QUALITY_GATE: ${{ inputs.ENABLE_QUALITY_GATE || false }}

# Workflow jobs
jobs:

  setEnvironment:
    runs-on: ubuntu-latest
    outputs:
      enable_quality_gate: ${{ steps.envVars.outputs.enable_quality_gate }}
    steps:
      - name: Pass inputs/env to job outputs
        id: envVars
        run: |
          enable_quality_gate=${{ env.ENABLE_QUALITY_GATE }}

          if [[ "$enable_quality_gate" == 'true' ]]; then
            echo "Quality Gate: ENABLED"
          else 
            echo "Quality Gate: DISABLED"
          fi

          echo "enable_quality_gate=$enable_quality_gate" >> $GITHUB_OUTPUT

  # Test the application
  test:

    runs-on: ubuntu-latest
    needs: setEnvironment
    strategy:
      matrix:
        node-version: [ 20.x ]

    services:

      wsdMongo:
        image: mongo:4.2.1
        ports:
          - 27017:27017
      wsdRedis:
        image: redis
        ports:
          - 6379:6379

    steps:

      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v4

      # Get version
      - name: Get version
        id: get-version
        run: |
          echo "VERSION=$(cat package.json \
            | grep version \
            | head -1 \
            | awk -F: '{ print $2 }' \
            | sed 's/[",]//g' \
            | tr -d ' ')" >> $GITHUB_OUTPUT

      # Setup node version
      - name: Setup node version ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://npm.pkg.github.com/
          scope: "@wsd-team-dev"

      # Check cache for dependencies
      - name: Find cached runtime dependencies
        id: cache-deps-run
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-dev-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}

      # Install dependencies
      - name: Install runtime dependencies
        if: ${{ steps.cache-deps-run.outputs.cache-hit != 'true' }}
        run: npm ci --force --loglevel=error

      # Cache dependencies
      - name: Cache runtime dependencies
        if: ${{ steps.cache-deps-run.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-dev-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}

      # Run and test
      - name: Run DAv2 and tests with coverage
        run: |
          npm run test:coverage

      # SonarQube code analysis
      - uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectVersion=${{ steps.get-version.outputs.VERSION }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Quality Gate
      - uses: sonarsource/sonarqube-quality-gate-action@master
        if: ${{ needs.setEnvironment.outputs.enable_quality_gate == 'true' }}
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}