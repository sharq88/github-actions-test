# Build, package and release DAv2
name: Build application

on:
  workflow_call:
    inputs:
      UPLOAD_ARTIFACT:
        description: Whether or not to upload as artifact for other jobs to use
        type: boolean
        required: false
        default: false
      ENABLE_QUALITY_GATE:
        description: Whether or not to enable quality gate
        type: boolean
        required: false
        default: false

# Environment vars common to all jobs
env:
  CI: true
  NODE_ENV: test
  NODE_AUTH_TOKEN: ${{ secrets.NPM_PACKAGE_READ_TOKEN }}
  UPLOAD_ARTIFACT: ${{ inputs.UPLOAD_ARTIFACT || false }}
  ENABLE_QUALITY_GATE: ${{ inputs.ENABLE_QUALITY_GATE || false }}

# Workflow jobs
jobs:

  setEnvironment:
    runs-on: ubuntu-latest
    outputs:
      upload_artifact: ${{ steps.envVars.outputs.upload_artifact }}
      enable_quality_gate: ${{ steps.envVars.outputs.enable_quality_gate }}
    steps:
      - name: Pass inputs/env to job outputs
        id: envVars
        run: |
          upload_artifact=${{ env.UPLOAD_ARTIFACT }}
          enable_quality_gate=${{ env.ENABLE_QUALITY_GATE }}

          if [[ "$upload_artifact" == 'true' ]]; then
            echo "Artifact Upload: ENABLED"
          else 
            echo "Artifact Upload: DISABLED"
          fi

          if [[ "$enable_quality_gate" == 'true' ]]; then
            echo "Quality Gate: ENABLED"
          else 
            echo "Quality Gate: DISABLED"
          fi
          
          echo "upload_artifact=$upload_artifact" >> $GITHUB_OUTPUT
          echo "enable_quality_gate=$enable_quality_gate" >> $GITHUB_OUTPUT

  test:
    uses: ./.github/workflows/stage-test.yml
    needs: setEnvironment
    with:
      ENABLE_QUALITY_GATE: ${{ needs.setEnvironment.outputs.enable_quality_gate == 'true' }}
    secrets: inherit

  build:

    runs-on: ubuntu-latest
    needs: setEnvironment
    strategy:
      matrix:
        node-version: [ 20.x ]

    steps:

      # Install additional build packages
      - name: Install additional build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libcairo2-dev libjpeg-dev libpango1.0-dev libgif-dev build-essential g++

      # Checkout source code
      - name: Checkout source code
        uses: actions/checkout@v4

      # Setup node version
      - name: Setup node version ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: https://npm.pkg.github.com/
          scope: "@wsd-team-dev"

      # Check cache for dependencies
      - name: Find cached runtime dependencies
        id: cache-deps-run
        uses: actions/cache/restore@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-run-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}

      # Install dependencies
      - name: Install runtime dependencies
        if: ${{ steps.cache-deps-run.outputs.cache-hit != 'true' }}
        run: npm ci --omit=dev --force --loglevel=error

      # Cache dependencies
      - name: Cache runtime dependencies
        if: ${{ steps.cache-deps-run.outputs.cache-hit != 'true' }}
        uses: actions/cache/save@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-npm-run-${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}

      # Build dist files
      - name: Build distribution files
        run: npm run production

      # Archive dist files into Tarball
      - name: Archive distribution files
        if: ${{ needs.setEnvironment.outputs.upload_artifact == 'true' }}
        run: |
          tar -cvzf release.tar.gz process-*.json package*.json public/ config/ node_modules/ src/

      # Upload Tarball as artifact
      - name: Upload distribution archive as artifact
        if: ${{ needs.setEnvironment.outputs.upload_artifact == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: dist
          overwrite: 'true'
          retention-days: 1
          path: release.tar.gz